---
import type Parser from "rss-parser";
import ArchiveIcon from "./icons/ArchiveIcon.astro";
import LinkIcon from "./icons/LinkIcon.astro";

interface Props {
	item: Parser.Item;
	as?: "li" | "div";
	class?: string;
}

const {
	item,
	as: Element = "div",
	class: additionalClasses = "",
} = Astro.props satisfies Props;

const yazzyUrl = import.meta.env.YAZZY_URL satisfies string | undefined;
const basePath = (import.meta.env.BASE_PATH satisfies string) ?? "";

const link = item.link;
const faviconUrl: string | null = link
	? `${basePath}/icons/${new URL(link).hostname}.ico`
	: null;
const faviconAlt: string | null = link
	? `Favicon for ${new URL(link).hostname}`
	: null;
---

<Element class={`flex flex-row gap-2 group *:mt-2 ${additionalClasses}`}>
	{
		faviconUrl && (
			<img
				src={faviconUrl}
				alt={faviconAlt}
				class="w-4 h-4 transition-all grayscale dark:invert group-hover:grayscale-0 group-hover:invert-0"
			/>
		)
	}
	{
		!faviconUrl && (
			<img
				src={`${basePath}/news-emoji.svg`}
				alt="News emoji"
				class="w-4 h-4 transition-all grayscale dark:invert group-hover:grayscale-0 group-hover:invert-0"
			/>
		)
	}
	<div class="grow min-w-0 !mt-0">
		<a href={item.link} class="block">
			<h2 class="text-lg font-bold">{item.title}</h2>
			{item.contentSnippet && <p class="truncate">{item.contentSnippet}</p>}
			<p>
				{item.author} â€¢ <relative-time
					datetime={new Date(item.pubDate ?? item.isoDate ?? "").toISOString()}
				></relative-time>
			</p>
		</a>
	</div>
	<a
		href={`https://archive.is/${item.link}`}
		aria-label="Open in archive.is"
		class="w-auto"
	>
		<ArchiveIcon title="Open in archive.is" />
	</a>
	{
		yazzyUrl && (
			<a
				href={`${yazzyUrl}/${item.link}`}
				aria-label="Open in Yazzy"
				class="w-auto"
			>
				<LinkIcon title="Open in Yazzy" />
			</a>
		)
	}
</Element>
