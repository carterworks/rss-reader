---
import { base } from "astro:config/client";
import type Parser from "rss-parser";
import { encodeItemLink } from "../lib/itemLinkEncoding";
import Dialog from "./Dialog.astro";
import ArchiveIcon from "./icons/ArchiveIcon.astro";
import LinkIcon from "./icons/LinkIcon.astro";
import SquareTopDownIcon from "./icons/SquareTopDownIcon.astro";
import { Image, inferRemoteSize } from "astro:assets";

interface Props {
	item: Parser.Item;
	as?: "li" | "div";
	class?: string;
}

const {
	item,
	as: Element = "div",
	class: additionalClasses = "",
	...props
} = Astro.props satisfies Props;

const yazzyUrl = import.meta.env.YAZZY_URL satisfies string | undefined;
const hostname = item.link ? new URL(item.link).hostname : undefined;
const faviconPath = hostname ? `${base}/icon/${hostname}.ico` : undefined;
const hasFavicon = faviconPath
	? await fetch(new URL(faviconPath, Astro.url)).then((r) => r.ok)
	: false;

const encodedLink = item.link ? encodeItemLink(item.link) : undefined;
const ogImagePath = encodedLink ? `${base}/og/${encodedLink}.jpg` : undefined;
let ogImageDimensions: Awaited<ReturnType<typeof inferRemoteSize>> | undefined;
if (ogImagePath) {
	try {
		const absoluteOgUrl = new URL(ogImagePath, Astro.url).toString();
		ogImageDimensions = await inferRemoteSize(absoluteOgUrl);
	} catch (error) {
		console.warn(
			`[feed-item] Failed to infer og image size for '${ogImagePath}':`,
			error,
		);
	}
}
const ogImageAttrs =
	ogImagePath && ogImageDimensions?.width && ogImageDimensions?.height
		? {
				src: ogImagePath,
				width: ogImageDimensions.width,
				height: ogImageDimensions.height,
			}
		: undefined;

const shouldUsePopover =
	item.content && item.content.toString().trim().length > 0;
const popoverId = `rss-contents-${item.link?.replace(/[^\w-]/g, "-")}`;
const linkAttrs = {
	el: shouldUsePopover ? "button" : "a",
	props: shouldUsePopover
		? {
				popovertarget: popoverId,
				ariaLabel: "Read article",
				type: "button",
			}
		: {
				href: item.link,
				rel: "noopener noreferrer",
				target: "_blank",
			},
};
const LinkElement = linkAttrs.el;
const linkProps = linkAttrs.props;
---

<Element class={`group relative ${additionalClasses}`} {...props}>
	<article
		class:list={[
			"relative",
			"bg-bg/60",
			"border",
			"border-ui-2",
			"md:rounded-lg",
			"hover:bg-bg/80",
			"hover:border-ui-3",
			"transition-all",
			"duration-300",
			"overflow-hidden",
			"flex",
			"flex-col",
			"h-full",
		]}
	>
		<LinkElement
			{...linkProps}
			class:list={[
				"flex",
				"grow",
				"flex-col",
				"gap-3",
				"text-left",
				"cursor-pointer",
				"rounded-md",
				"hover:bg-ui-2/60",
				"transition-colors",
				"duration-200",
				"rounded-none",
				"focus-visible:outline-none",
				"focus-visible:ring-2",
				"focus-visible:ring-bl/60",
			]}
		>
			<div
				class="relative overflow-hidden border border-ui-2/60 aspect-[16/9] bg-bg-2/40"
			>
				{
					ogImageAttrs ? (
						<>
							<Image
								src={ogImageAttrs.src}
								width={ogImageAttrs.width}
								height={ogImageAttrs.height}
								alt={`Preview image for ${item.title ?? item.link ?? "feed item"}`}
								class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-[1.02]"
								loading="lazy"
							/>
							<div class="absolute inset-0 bg-gradient-to-t from-bg/60 via-transparent to-transparent" />
						</>
					) : (
						<div class="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-ui-2/60 via-bg/20 to-ui-3/60">
							<LinkIcon class="h-6 w-6 text-ui-3" />
						</div>
					)
				}
			</div>
			<div class="flex gap-3 items-start px-2">
				<div class="flex-shrink-0 mt-0.5">
					{
						hasFavicon ? (
							<div class="relative">
								<div class="absolute inset-0 bg-gradient-to-br from-bl/20 to-pu/20 rounded blur-sm" />
								<img
									src={faviconPath}
									alt={`Favicon for ${item.link}`}
									class="relative h-4 w-4 transition-all duration-300 grayscale dark:invert group-hover:grayscale-0 group-hover:invert-0 md:rounded-sm"
									loading="lazy"
								/>
							</div>
						) : (
							<div class="p-0.5 bg-gradient-to-br from-ui-2 to-ui-3 md:rounded border border-ui-3">
								<LinkIcon title="No favicon" class="w-3 h-3 text-tx-2" />
							</div>
						)
					}
				</div>
				<div class="flex-1 min-w-0">
					<h2
						class="text-base font-semibold leading-tight mb-1 group-hover:text-bl transition-colors duration-200"
						set:html={item.title}
					/>
					{
						(item.contentSnippet ?? item.content) && (
							<p class="text-tx text-xs leading-relaxed mb-2 line-clamp-2">
								{item.contentSnippet ?? item.content}
							</p>
						)
					}
				</div>
			</div>

			<div class="flex flex-col gap-2 pt-3 px-2 mt-auto">
				<div
					class="flex flex-wrap items-center gap-x-1.5 gap-y-0.5 text-xs text-tx-2 leading-snug"
				>
					{
						Boolean(item.creator) && (
							<>
								<span class="font-medium text-pu break-words">
									{item.creator}
								</span>
								<span class="text-ui-3 flex-shrink-0">•</span>
							</>
						)
					}
					{
						Boolean(hostname) && (
							<>
								<span class="font-medium text-tx break-words">{hostname}</span>
								<span class="text-ui-3 flex-shrink-0">•</span>
							</>
						)
					}
					<relative-time
						datetime={new Date(
							item.pubDate ?? item.isoDate ?? "",
						).toISOString()}
						class="text-tx-2 whitespace-nowrap"></relative-time>
				</div>
			</div>
		</LinkElement>

		<div class="flex">
			<a
				href={item.link}
				rel="noopener noreferrer"
				target="_blank"
				aria-label="Open in new tab"
				title="Open in new tab"
				class="p-1 bg-bg-2 hover:bg-ui-2 grow rounded-none transition-all duration-200"
			>
				<SquareTopDownIcon class="w-4 h-4 mx-auto text-tx-2 hover:text-tx" />
			</a>
			<a
				href={`https://archive.is/${item.link}`}
				aria-label="Open in archive.is"
				rel="noopener noreferrer"
				target="_blank"
				class="p-1 bg-bg-2 hover:bg-ui-2 grow rounded-none transition-all duration-200"
				title="Archive this article"
			>
				<ArchiveIcon class="w-4 h-4 mx-auto text-tx-2 hover:text-tx" />
			</a>
			{
				yazzyUrl && (
					<a
						href={`${yazzyUrl}/${item.link}`}
						aria-label="Open in Yazzy"
						rel="noopener noreferrer"
						target="_blank"
						class="p-1 bg-bg-2 hover:bg-ui-2 grow rounded-none transition-all duration-200"
						title="Open in Yazzy"
					>
						<LinkIcon class="w-4 h-4 mx-auto text-tx-2 hover:text-tx" />
					</a>
				)
			}
		</div>
		{
			shouldUsePopover && (
				<Dialog id={popoverId} class="space-y-4">
					<hgroup>
						<h3 class="text-base font-semibold leading-tight mb-2">
							<a href={item.link} rel="noopener noreferrer" target="_blank">
								{item.title}
								<SquareTopDownIcon class="inline-block w-3 h-3" />
							</a>
						</h3>
						<p class="flex items-center gap-1.5 text-xs text-tx-2">
							{Boolean(item.creator) && (
								<>
									<span class="font-medium text-pu">{item.creator}</span>
									<span class="text-ui-3">•</span>
								</>
							)}
							{Boolean(hostname) && (
								<>
									<span class="font-medium text-tx">{hostname}</span>
									<span class="text-ui-3">•</span>
								</>
							)}
							<relative-time
								datetime={new Date(
									item.pubDate ?? item.isoDate ?? "",
								).toISOString()}
								class="text-tx-2"
							/>
						</p>
					</hgroup>
					<article class="prose" set:html={item.content} />
				</Dialog>
			)
		}
	</article>
</Element>
