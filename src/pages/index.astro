---
import { base } from "astro:config/client";
import type Parser from "rss-parser";
import FeedItem from "../components/FeedItem.astro";
import BookmarkIcon from "../components/icons/BookmarkIcon.astro";
import CodeFileIcon from "../components/icons/CodeFileIcon.astro";
import DocumentIcon from "../components/icons/DocumentIcon.astro";
import "../styles/global.css";
import Dialog from "../components/Dialog.astro";
import BugIcon from "../components/icons/BugIcon.astro";
import LayersIcon from "../components/icons/LayersIcon.astro";
import LinkIcon from "../components/icons/LinkIcon.astro";
import NewsIcon from "../components/icons/NewsIcon.astro";
import type { FeedSourceResult } from "../lib/feedData";
import { fetchFeedData } from "../lib/feedData";

const RECENT_FEED_CUTOFF_TIME = import.meta.env.RECENT_FEED_CUTOFF_TIME
	? Number.parseInt(import.meta.env.RECENT_FEED_CUTOFF_TIME, 10)
	: 6 * 60 * 60 * 1000;

const basePath = import.meta.env.BASE_URL satisfies string | undefined;

type FeedItemType = Parser.Item & { updated?: string; isoDate?: string };

async function getAllFeedItems(): Promise<{
	sources: FeedSourceResult[];
	items: FeedItemType[];
	errors: Error[];
}> {
	const data = await fetchFeedData();
	return {
		sources: data.sources,
		items: data.sources.flatMap(
			(source) => source.feed?.items ?? [],
		) as FeedItemType[],
		errors: data.errors,
	};
}
let items: FeedItemType[] | undefined;
let bigError: Error | undefined;
let sources: FeedSourceResult[] = [];
let littleErrors: Error[] = [];
try {
	const data = await getAllFeedItems();
	littleErrors = data.sources.flatMap((source) =>
		source.error ? [source.error] : [],
	);
	items = data.items;
	sources = data.sources;
} catch (err) {
	console.error("[index.astro] Error fetching/parsing feeds:", err);
	bigError = err as Error;
	bigError.message = `Error fetching feeds: ${bigError.message}`;
}
const updateTime = new Date();
const cutoffTime = new Date(updateTime.getTime() - RECENT_FEED_CUTOFF_TIME);
const sourceFaviconMap = new Map<string, string>();
function getSourceErrorMessage(source: FeedSourceResult): string | undefined {
	if (!source.error) return undefined;
	const prefix = `[${source.url}] `;
	return source.error.message.startsWith(prefix)
		? source.error.message.slice(prefix.length)
		: source.error.message;
}
await Promise.allSettled(
	sources.map(async (source) => {
		const hostname = source.url ? new URL(source.url).hostname : undefined;
		const faviconPath = hostname ? `${base}/icon/${hostname}.ico` : undefined;
		const hasFavicon = faviconPath
			? await fetch(new URL(faviconPath, Astro.url)).then((r) => r.ok)
			: false;
		if (hasFavicon && hostname) {
			sourceFaviconMap.set(source.url, hostname);
		}
	}),
);
items = items
	?.filter((item) => item.pubDate && new Date(item.pubDate) > cutoffTime)
	.sort(
		(a, b) =>
			new Date(b.pubDate ?? b.isoDate ?? b.updated ?? "").getTime() -
			new Date(a.pubDate ?? a.isoDate ?? a.updated ?? "").getTime(),
	);
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta http-equiv="X-UA-Compatible" content="ie=edge" />
		<title>Carter's RSS Feeds</title>
		<link
			rel="icon"
			href={`${basePath}/news-emoji.svg`}
			sizes="any"
			type="image/svg+xml"
		/>
		<link
			rel="alternate"
			href={`${basePath}/feed.xml`}
			title="Carter's RSS Feeds"
			type="application/atom+xml"
		/>
		<link rel="manifest" href={`${basePath}/manifest.json`} />
		<script>
			import "@github/relative-time-element";
		</script>
		<script>
			// Prevent body scroll when popover is open
			document.addEventListener("DOMContentLoaded", () => {
				const popovers = ["sources"]; // Extendable for future dialogs
				popovers.forEach((id) => {
					const popover = document.getElementById(id);
					if (!popover) return;
					popover.addEventListener("toggle", (e: any) => {
						if (e.newState === "open") {
							document.body.classList.add("popover-open");
						} else {
							document.body.classList.remove("popover-open");
						}
					});
				});
			});
		</script>
	</head>
	<body
		class="min-h-screen bg-bg text-tx space-y-4 *:mx-auto *:max-w-prose font-gemoetric-humanist"
	>
		<header
			class="border-1 border-ui-3 md:rounded-xl p-4 flex flex-col sm:flex-row gap-3 items-start sm:items-center justify-between"
		>
			<div class="flex items-center gap-2.5 flex-3">
				<div
					class="p-1.5 bg-gradient-to-br from-bl rounded-lg to-pu border border-ui-3"
				>
					<NewsIcon class="text-white" />
				</div>
				<hgroup>
					<h1
						class="text-xl md:text-2xl font-bold bg-gradient-to-r from-bl to-pu bg-clip-text text-transparent"
					>
						Carter's RSS Feeds
					</h1>
					<p class="text-tx text-xs">aka how I pretend to be informed.</p>
				</hgroup>
			</div>
                        <div class="flex flex-wrap gap-2 flex-2">
                               <button
                                       popovertarget="sources"
                                       aria-label={`${sources.length} sources, ${items?.length ?? 0} items (${littleErrors.length} errors)`}
                                       class="flex items-center gap-2 px-2.5 py-1.5 bg-bg-2 rounded-lg border border-ui-2 cursor-pointer text-left text-xs sm:text-sm sm:max-w-[18rem]"
                               >
                                       <DocumentIcon class="text-bl shrink-0" />
                                       <span class="flex min-w-0 flex-1 flex-col gap-1 text-tx">
                                               <span class="sr-only">
                                                       {sources.length} sources, {items?.length ?? 0} items ({littleErrors.length} errors)
                                               </span>
                                               <span class="text-[0.625rem] uppercase tracking-[0.2em] text-tx-2">Sources overview</span>
                                               <span class="hidden sm:flex sm:flex-wrap sm:items-center sm:gap-1.5">
                                                       <span class="inline-flex items-center gap-1 rounded-full bg-ui-1 px-1.5 py-0.5 text-[0.6875rem] leading-none">
                                                               <span class="font-mono tabular-nums text-sm leading-none">{sources.length}</span>
                                                               <span class="uppercase tracking-[0.18em] text-[0.5625rem] text-tx-2">sources</span>
                                                       </span>
                                                       <span class="inline-flex items-center gap-1 rounded-full bg-ui-1 px-1.5 py-0.5 text-[0.6875rem] leading-none">
                                                               <span class="font-mono tabular-nums text-sm leading-none">{items?.length ?? 0}</span>
                                                               <span class="uppercase tracking-[0.18em] text-[0.5625rem] text-tx-2">items</span>
                                                       </span>
                                                       <span class="inline-flex items-center gap-1 rounded-full bg-ui-1 px-1.5 py-0.5 text-[0.6875rem] leading-none">
                                                               <span class="font-mono tabular-nums text-sm leading-none">{littleErrors.length}</span>
                                                               <span class="uppercase tracking-[0.18em] text-[0.5625rem] text-tx-2">errors</span>
                                                       </span>
                                               </span>
                                               <span class="sm:hidden text-tx">
                                                       {sources.length}, {items?.length ?? 0}, {littleErrors.length}
                                               </span>
                                       </span>
                               </button>

				<a
					href="https://github.com/carterworks/rss-reader"
					class="flex items-center gap-1.5 px-2.5 py-1.5 bg-bg-2 hover:bg-ui-2 rounded-lg border border-ui-2 hover:border-ui-3 transition-all duration-200 text-xs"
					title="View the source code on GitHub"
				>
					<CodeFileIcon class="text-tx-2" />
					<span class="hidden sm:inline text-tx">GitHub</span>
				</a>

				<a
					href={`${basePath}/feed.xml`}
					class="flex items-center gap-1.5 px-2.5 py-1.5 bg-bg-2 hover:bg-ui-2 rounded-lg border border-ui-2 hover:border-ui-3 transition-all duration-200 text-xs"
					title="RSS/Atom Feed"
				>
					<BookmarkIcon class="text-or" />
					<span class="hidden sm:inline text-tx">RSS Feed</span>
				</a>

			</div>
			<Dialog id="sources">
				<div class="flex items-center gap-2.5 mb-4 text-lg">
					<div class="p-1.5 bg-gr/10 md:rounded-lg border border-gr/20">
						<LayersIcon class="text-gr" />
					</div>
					<h2 class="font-semibold text-tx">Sources</h2>
				</div>
				<p class="text-xs text-tx-2 mb-4">
					{sources.length} sources, {items?.length ?? 0} items, {littleErrors.length} errors
				</p>
				<ul role="list" class="space-y-2">
					{
                                                sources.map((source) => (
                                                        <li class="bg-bg-2 border border-ui-2 md:rounded-lg p-3 hover:bg-ui/50 transition-colors space-y-2">
                                                                <a
                                                                        href={source.url}
                                                                        class="text-xs text-tx whitespace-pre-wrap break-words font-monospace-code flex items-center gap-2"
                                                                >
                                                                        {sourceFaviconMap.has(source.url) ? (
                                                                                <img
                                                                                        src={`${base}/icon/${sourceFaviconMap.get(source.url)}.ico`}
                                                                                        alt={`Favicon for ${source.url}`}
                                                                                        class="dark:invert"
                                                                                        loading="lazy"
                                                                                />
                                                                        ) : (
                                                                                <LinkIcon title="No favicon" class="w-3 h-3 text-tx-2" />
                                                                        )}
                                                                        <span>{source.url}</span>
                                                                </a>
                                                                {source.error && (
                                                                        <div class="flex items-start gap-2 rounded-md border border-re/40 bg-re/10 p-2 text-xs text-re">
                                                                                <BugIcon class="w-3.5 h-3.5 mt-0.5" />
                                                                                <span class="whitespace-pre-wrap break-words font-monospace-code text-left">
                                                                                        {getSourceErrorMessage(source)}
                                                                                </span>
                                                                        </div>
                                                                )}
                                                        </li>
                                                ))
                                        }
                                </ul>
                        </Dialog>
		</header>

		<main class="space-y-4">
			{
				bigError && (
					<div class="bg-re/10 border border-re/20 md:rounded-xl p-4 text-center">
						<div class="flex items-center justify-center gap-2.5 mb-3 text-lg ">
							<BugIcon class="text-re" />
							<h2 class="font-semibold text-re">Error Loading Feeds</h2>
						</div>
						<p class="text-tx mb-1.5">{bigError.message}</p>
						<p class="text-tx-2 text-sm">Please try again later.</p>
					</div>
				)
			}

			{
				!bigError && (
					<div class="space-y-3">
						<div class="flex items-center gap-3 px-3 py-2 bg-bg-2/50 backdrop-blur-sm md:rounded-lg border border-ui-2">
							<div class="flex-1 h-px bg-gradient-to-r from-transparent via-ui-2 to-transparent" />
							<div class="flex items-center gap-1.5 text-xs text-tx-2">
								<div class="w-1.5 h-1.5 bg-gr md:rounded-full animate-pulse" />
								<span>
									Last updated <relative-time datetime={updateTime} />
								</span>
							</div>
							<div class="flex-1 h-px bg-gradient-to-r from-transparent via-ui-2 to-transparent" />
						</div>

						<div class="space-y-2">
							{items?.map((item, index) => (
								<FeedItem
									item={item}
									class="motion-safe:animate-[fade-in_0.6s_ease-out_both]"
									style={`animation-delay: ${Math.log(index + 1) * 60}ms`}
								/>
							))}
						</div>

						<div class="flex items-center gap-3 px-3 py-2 bg-bg-2/50 backdrop-blur-sm md:rounded-lg border border-ui-2 mt-6">
							<div class="flex-1 h-px bg-gradient-to-r from-transparent via-ui-2 to-transparent" />
							<div class="text-xs text-center">
								<p>That's everything from the last</p>
								<p>
									<relative-time datetime={cutoffTime} format="duration" />
								</p>
							</div>
							<div class="flex-1 h-px bg-gradient-to-r from-transparent via-ui-2 to-transparent" />
						</div>
					</div>
				)
			}
		</main>
	</body>
</html>
